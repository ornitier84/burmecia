---
strings:
#-------------------------------------------------------------------------------
# Translations for exception classes
#-------------------------------------------------------------------------------
  debugging:
    commands:
      group:
        up: |-
          Machine targets for group %{group} under environment %{environment}: %{machines}
  info:
    boot:
      up: |-
        Bringing up %s
    boot_destroy: |-
      Destroying %s!
    boot_halt: |-
      Halting %s!
    boot_completed: |-
      Machine booted and ready!
    commands:
      environment:
        args: 
          list: 
            listing: |-
              Listing active environments
            active: |-
              Currently active environment is %s
      group:
        create: |-
          Creating group %{group} under environment %{environment}
        reload: |-
          Reloading node group %{group} under environment %{environment}
        status: |-
          Reporting status for node group %{group} under environment %{environment}
        up: |-
          Bringing up node group %{group} under environment %{environment}!
      node:
        create: |-
          Writing node definition file %s
    completion:
      done: |-
        Done!
    environment:
      keys:
        insert: |-
          Inserting environment keys for node %s
      activate: |-
        Activating vagrant environment %s
        Environment context file is %s.
    generic:
      message: |-
        Generic Message: %s
    group:
      up: |-
        Bringing up node group %s
    inventory:
      file:
        write: |-
          Writing inventory file %s
    machine:
      linked: 
        up: |-
          Processing linked machines for %{machine}
    managed:
      provisioners:
        ansible:
          invoke: |-
            Running ansible via %s
      status:
        header: |
          Current managed machine states:
          
    no_provisioners: |-
      No provisioners specified in node yaml for host %s
    provisioners:
      hosts: |-
        Adding %s %s to /etc/hosts on machine %s
      local:
        inline: |-
          Running local command: %s
        w_args: |-
          Running local script %s with args %s
        ok: |-
          Local command execution was successful, output was: %s
      ansible:
        controller: |-
          Ansible provisioner is in 'controller' mode. 
          Ansible actions will executed via %{ansible_surrogate}
          Machine targets: 
          %{machines}
    singleton:
      ssh:
        command: |-
          Running ssh process as follows: %s
        ok: |-
          Remote ssh command execution was successful, output was: %s
    time:
      elapsed: |-
        vagrant command took %s seconds to complete
  warnings:
    context:
      environment:
        activate_default: |-
          <<[o_o]>> I couldn't determine the currently active environment context
          Using default: %s
        no_active: |-
          You have not activated a vagrant environment.
          Please do so via `vagrant environment activate ENVIRONMENT_NAME`
          To get a listing of available environments, run: `vagrant environment list`
          Using default: %s
      nodes:
        empty: |-
          Node set is empty. Make sure you have defined your nodes correctly,
          and that you are treating managed nodes accordingly.
          This is why you are most likely seeing only the default vagrant status.
    missing_plugin: |-
      You are missing at least one required vagrant plugin, install with:
    missing_plugin_install: |-
      rake init or vagrant plugin install %s
    machine:
      linked:
        yaml_syntax: |-
          Skipped processing linked machines for %{machine} --
          Linked machines must be a yaml list object
    provisioners:
      ansible:
        controller:
          skipping: |-
            Because the Ansible provisioner is in 'controller' mode, we
            are skipping ansible provisionment.
            You must call the provision action ensuring the ansible surrogate hostname
            is specified last, as with:
            vagrant provision %{machine} %{surrogate}          
          nodes:
            not_created: |-
              Ansible provisioner is in 'controller' mode and the node %{machine} is not yet created.
              As such, I am skipping the ansible provisionment step.
              Once it has been created, please run the provisionment action manually:
              vagrant provision %{machine}
    fso:
      not_found: |-
        The file object was not found: %s
      synced_folder_not_found: |-
        Could not find path %s, skipping synced folder
    definition:
      skipped: |-
        Some node definitions were skipped!
        Run `vagrant debug status` to see why
      skipping:
        Skipping node definition %s due to condition - %s
      provisioners:
        malformed: |-
          The provisioners yaml structure for %s does not match type Hash
          Consult the node definition sample for proper syntax
          Skipping this entry ...
    libvirt_windows_os: |-
      Detected non-Windows Host OS
      Make sure you specify the proper hypervisor key:
        key hypervisor: 'libvirt' 
    vagrant:
      noexec: |-
        Skipping main function, since we're calling a custom command.   
  errors:
    commands:
      group:
        noenv: |-
          <<[o_o]>> You must specify an environment
    debug:
      nopry: |-
        I couldn't import the 'pry' modules for debugging
        If these are not installed, try installing with:
          vagrant plugin install rb-readline
          vagrant plugin install pry-rescue
          vagrant plugin install pry-byebug
          vagrant plugin install pry-stack_explorer
    fso:
      operations:
        failure: |-
          There was a general failure in the attempt of this filesystem operation
          Error was: %s
    group:
      not_found: |-
        The specified group '%s' was not found in your environment
    inventory:
      file:
        error: |-
          Error in writing inventory file
          Error: %s
          Excerpt from backtrace: %s
      path:
        notfound: |-
          The environment you specified has no environment directory: %s
    environment:
      config: |-
        There was an error in parsing the specified environment config %s
        Error was %s
      path:
        notfound: |-
          Not activating %{env}, as the environment path %{envp} was not found.
          Activate an existing environment instead, e.g.
          vagrant activate %{env}
    definition:
      yaml_syntax: |-
        %s fails yaml syntax check
      nobox: |-
        You didn't speficy a vagrant box in node definition %s
        Which either means you intend for the node to be of managed node type or
        you simply forgot to include a box specification.
        Consult the 'Usage' section in the README or review the node definition template 
        Under the 'examples' directory
      provider:
        syntax: |-
          Encountered an error during initialization of provider options, error was %s
    managed:
      not_reachable: |-
        The specified managed node is not reachable and/or not accepting requests for management: %s
        Perhaps the node is not powered on?
      checks_fail: |-
        The vagrant deployment for managed node %s will fail, 
        as it does not pass all requisite preflight checks 
      ssh_privatekey_notfound: |-
        Skipping managed node %s, 
        as I could not find the ssh private key being referenced %s
      missingkey: |-
        The node definition for %s is missing the following key(s):
      missingkeys: |-
         - %s        
    provisioners:
      local:
        failed: |-
          Local command execution failed with error: %s
      ansible:
        surrogate:
          not_reachable: |-
            Windows platform detected. 
            As such, the project configuration designates a surrogate through which ansible is to be invoked.
            However, this host is not available, not reachable, and/or not accepting requests for interaction: %{machine}
            If the machine is not powered on or created, try running `vagrant up %{machine}`
    res: |-
      Could not reliably determine the hardware spec: %s
    singleton:
      ssh:
        failed: |-
          Remote ssh command execution failed with error: %s    
    exec: |-
      Something went wrong in executing the command you specified: %s
    generic: |-
      Something went terribly wrong
      Try calling the the same command, but this time, precede it with the 'debug' keyword
    loaderror: |-
      There was a problem loading at least one required library
      You may experience unexpected results!
      Error was: %s
      For the full backtrace, set the debug option in config.yaml to 'true'
    unhandled: |-
      I encountered an unhandled exception
      Error Message: %{errmessage}
      First Line of Backtrace: %{firstline}
      Full Backtrace: %{backtrace}

      Try enabling debugging via
      vagrant option debug on
    vagrant:
      no_env_dotfile: |-
        <<[x_x]>>
        Vagrant has been instructed to separate dotfile paths
        Invalid VAGRANT_DOTFILE_PATH environmental variable
        Here's how to fix this error:
        Run:
          - vagrant environment list to view available environments
          - vagrant environment activate {{ environment_name }} (e.g. %{env})
          - export VAGRANT_DOTFILE_PATH={{ environment_name }} vagrant %{args}
        Consult the README for more information
