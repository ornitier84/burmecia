---
definitions:
  commands:
    node:
      name: venv.node
      synopsis: calls vagrant commands against specified node
      execute: |
        node = VenvEnvironment::Nodes.new
        options = {}
        opt_parser = OptionParser.new do |opt|
          opt.banner = "Usage: vagrant node ACTION [OPTIONS]"
          opt.separator  ""
          opt.separator  "Actions"
          opt.separator  "     create: create machine definition as per specification"
          opt.separator  ""
          opt.separator  "Options"
          opt.on("-b","--box BOX","specify the machine vagrant box") do |box|
            options[:box] = box
          end                                                 
          opt.on("-e","--environment ENVIRONMENT","specify the machine's environment context") do |environment|
            options[:environment] = environment
          end  
          opt.on("-g","--group GROUP","specify the machine's group") do |group|
            options[:group] = group
          end 
          opt.on("-n","--name MACHINE_NAME","specify the machine name") do |name|
            options[:name] = name
          end 
          opt.on("-s","--size SIZE","specify the machine size (small, medium, large, xlarge)") do |size|
            options[:size] = size
          end 
          opt.separator  "Options"
          opt.on("-b","--box BOX","specify the machine vagrant box") do |box|
            options[:box] = box
          end           
          opt.on("-h","--help","help") do
            puts opt_parser
          end
        end
        opt_parser.parse!
        case
        when [ARGV[1] == "create", 
        options.key?(:environment), 
        options.key?(:group),
        options.key?(:name)
        ].all?
          box = options.key?(:box) ? options[:box] : $vagrant.defaults.nodes.keys.box
          size = options.key?(:size) ? options[:size] : $vagrant.defaults.nodes.size
          node.create(options[:name], options[:group], 
          options[:environment], box, size)
        else
          puts opt_parser
        end
    group:
      name: group
      synopsis: call vagrant commands against specified node groups
      execute: |
        require 'open3'
        $no_provision = false
        group = VenvEnvironment::Groups.new
        options = {}
        opt_parser = OptionParser.new do |opt|
          opt.banner = "Usage: vagrant group ACTION <PARAMS> [OPTIONS]"
          opt.separator  ""
          opt.separator  "Actions"
          opt.separator  "     create: create machine group folder under specified environment"
          opt.separator  "     up: boot up specified machine group under specified environment context"
          opt.separator  ""
          opt.separator  "Options"
          opt.on("-e","--environment ENVIRONMENT","specify the machine's environment context") do |environment|
            options[:environment] = environment
          end                    
          opt.on("-N","--no-provision","skip provisionment steps") do |no_provision|
            options[:no_provision] = no_provision
          end           
          opt.on("-h","--help","help") do
            puts opt_parser
          end
          opt.separator  ""          
          opt.separator  "Usage Examples:"
          opt.separator  "     vagrant group create mygroup --environment allentown"
          opt.separator  "     vagrant group up mygroup --environment allentown"
          opt.separator  "     vagrant group up mygroup --environment allentown --no-provision"
          opt.separator  ""          
        end
        opt_parser.parse!
        case
        when [ARGV[1] == "create",
        options.key?(:environment)].all?
          node_group = ARGV[2]
          group.create(node_group, options[:environment])
        when [ARGV[1] == "up", options.key?(:environment)].all?
          node_group = ARGV[2]
          no_provision = options.key?(:no_provision) ? '--no-provision' : ''
          puts "Bringing up node group #{node_group} under environment #{options[:environment]}!"
          Vagrant::Util::Subprocess.execute(VenvCommon::CLI.vagrant_cmd, 'environment', 'activate', options[:environment])
        else
          puts opt_parser
        end
    edit:
      name: edit
      synopsis: Calls your preferred text editor for modifying project files
      execute: |
        options = {}
        opt_parser = OptionParser.new do |opt|
          opt.banner = "Usage: vagrant edit MACHINE_NAME OBJECT"
          opt.separator  ""
          opt.separator  "Objects"
          opt.separator  "     playbook: opens the machine's dynamic playbook in your project editor"
          opt.separator  "     definition: opens the machine's definition file"
          opt.separator  ""
          opt.separator  "Options"
          opt.on("-e","--environment ENVIRONMENT","specify the machine's environment context") do |environment|
            options[:environment] = environment
          end          
          opt.on("-g","--group GROUP","specify the machine's group") do |group|
            options[:group] = group
          end          
          opt.on("-h","--help","help") do
            puts opt_parser
          end
        end
        opt_parser.parse!
        case
        when ARGV[2] == "playbook"
          machine = ARGV[-2]
          file_obj = "./#{$vagrant.local_data_dir}/machines/#{machine}/provisioners/ansible/dynamic_playbook.yaml"          
        when [ARGV[2] == "definition", options.key?(:environment), options.key?(:group)].all?
          file_obj = "#{$environment.basedir}/#{options[:environment]}/#{$environment.nodesdir}/#{options[:group]}/#{ARGV[-2]}.yaml"
        else
          puts opt_parser
        end
        Vagrant::Util::Subprocess.execute($project.editor.path, $project.editor.options, file_obj)
    environment:
      name: environment
      synopsis: Specifies environment context for vagrant operations
      execute: |
        $environment_context = "all";
        options = {}
        opt_parser = OptionParser.new do |opt|
          opt.banner = "Usage: vagrant environment ACTION [OPTIONS]"
          opt.separator  ""
          opt.separator  "Actions"
          opt.separator  "     activate: activate specified environment"
          opt.separator  "     list: lists available environments"
          opt.separator  ""
          opt.separator  "Options"
          opt.on("-h","--help","help") do
            puts opt_parser
          end
        end
        opt_parser.parse!
        case ARGV[1]
        when "activate"
          $environment_context = ARGV[2]
        when "list"
          Dir.glob("#{$environment.basedir}/*").select {
            |f| 
            puts f if File.directory?(f)
          }
        else
          puts opt_parser
        end
    inventory:
      name: inventory
      synopsis: Sets environment context for writing inventory yaml file relevant to specified environment(s)
      execute: |
        $environment_context = "all";
        options = {}
        opt_parser = OptionParser.new do |opt|
          opt.banner = "Usage: vagrant inventory ACTION ENVIRONMENT"
          opt.separator  ""
          opt.separator  "Actions"
          opt.separator  "     create: creates ansible inventory file (inventory.yaml) for specified environment"
          opt.separator  ""
          opt.on("-h","--help","help") do
            puts opt_parser
          end
        end
        opt_parser.parse!
        case ARGV[1]
        when "create"
          $environment_context = ARGV[2]
        else
          puts opt_parser
        end
    managed:
      name: managed
      synopsis: Sets managed boolean to true
      execute: |
        options = {}
        opt_parser = OptionParser.new do |opt|
          opt.banner = "Usage: vagrant managed ACTION [OPTIONS]"
          opt.separator  ""
          opt.separator  "Actions"
          opt.separator  "     provision: run provisioners against specified managed machine"
          opt.separator  "     shutdown: shut down specified managed machine"
          opt.separator  "     status: print status of managed machines"
          opt.separator  "     up: boot up specified managed machine (via wake-on-lan packet)"
          opt.separator  ""
          opt.separator  "Options"
          opt.on("-h","--help","help") do
            puts opt_parser
          end
        end
        opt_parser.parse!
        case 
        when [ "provsion","shutdown","status"].include?(ARGV[1])
          $managed = true
        else
          puts opt_parser
        end
